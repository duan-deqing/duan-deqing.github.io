---
layout:     post
title:      "零基础速成AI编程指南"
subtitle:   "Zero Foundation Quick AI Programming Guide"
date:       2025-03-18
author:     "duan-deqing"
header-img: "img/post-bg/post-bg-ai-coding-roadmap.jpg"
tags:
    - AI
    - Road Map
---

## 00 普通人为什么要编程？菜得扣脚也能赚钱吗？
  - 赚钱
  - 提高效率、赚时间
    - 比如，监控网页上的价格、爬取数据、etc
  - 如果人生重开，不管什么行业，我都会重新学一下编程

## 01 需要提前准备什么知识？要学多久？ 
  - AI正在重塑计算机教育。类似现在不需要学算盘，有计算器。你能看懂数字，知道加减乘除是什么意思就行了。
  - 得意忘形：看一遍教程，可以忘记语法细节。记得有这个东西就行。

### 学习语言
  - Python（脚本）（学2-4周）
  - JavaScript（前端）（应用软件）（4-8周）
    - Web是最好的，能触达最多用户。小程序、app、插件，都可以用Web技术实现
  - 接受一知半解的状态，对于程序员，一知半解也是常态。

### 学习方法
  - 搜相关视频教程，快速看。遵循二八定律。
    - 可以跟着教程做一遍，跟不上也无所谓。核心是要做到得意忘形。
  - 学会使用AI学习，互动式学习，就像打游戏。  

> [prompt_1]<br>  
> 
> 我想学习[X]。请按照二八法则(80-20)原则制定一个全面的学习计划，重点关注能让我开始构建项目的20%核心概念。请将计划按周安排，总计[Y]周，每周涵盖特定的学习主题。<br>  
> 
> 在完成这[Y]周的核心学习后，请推荐5个难度递增的项目（从入门到进阶），帮助我应用和拓展[X]的知识。对于每个项目，请提供简要描述并列出它将帮助强化的关键概念。请确保计划详细到足以让初学者跟随，同时也要有足够的挑战性来培养独立思考和解决问题的能力。<br><br>  
>
> [prompt_2]<br>  
> 
> 我正在学习[X]中的[Y]。请提供：<br>  
> 
>   1. 简明扼要地解释[Y]，包括其用途和常见使用场景。<br>
>   2. 一个演示[Y]的简单代码示例。<br>
>   3. 初学者关于[Y]常见的三个错误或误解，以及如何避免它们。<br>
>   4. 两个[Y]特别有用的实际应用场景或用例。<br>
>   5. 三个难度递进的练习题，帮助我练习使用[Y]。请只提供题目描述，不要提供解答。<br>  
> 
> 在提供以上信息后，请向我提出一个关于[Y]的发人深省的问题，引导我更深入地思考它的应用或影响。<br>
- 结合简单的练习。

### 了解怎么做一个项目
 - 看懂一个实战项目（比如开发一个网站）
 - 搜索 "Python项目" / "Python实战" / "全栈项目"
 - 了解一个项目是怎么合在一起的。
 - **学会测试 / 调试 / 各种工具**

## 02 怎么开始循序渐进的开始写实用的项目？开发什么东西？
 - 首先要做一个软件项目，开发应用不一定要写代码，例如使用无代码平台coze
   - 举个例子，短视频链接转爆款文案
 - 接下来要开始写代码。开发什么？
   - Python脚本
     - 文件读写/操作(结合AI)
     - 网页爬虫（价格监控/定期提醒...）
     - 操作Excel等数据表
     - 自动发邮件/发信息
     - 定时任务（定时夸夸自己）
     - 处理图片
     - 控制鼠标键盘
     - 结合前面多个
   - 浏览器插件（比较容易上架到官方商店）
   - 网页（web app）
   - 上架一个app赚钱
     - 推荐上架IOS商店，对个人开发者最友好
     - 尽量做纯客户端的东西，会简单一点，涉及到后端会太复杂
 - 怎么开发？
   - 不要说"给我开发一个淘宝"
   - 要学会将复杂问题划分成一个一个简单问题，结合AI辅助拆解问题。
   - 开发本质上只要一个方法：分而治之

> [prompt]<br>  
> 
> 我准备开始制作[X]项目，这个项目设计[Y]，我目前在[Z]方面的水平是[入门/中级/高级]，请提供：<br>  
> 
> 1. 这个项目应该具备的主要组件或功能的高层次概述。<br>
> 2. 建议的项目结构，包括需要创建的主要文件或模块。<br>
> 3. 在构建这个项目时可能遇到的三个关键挑战，以及克服这些挑战的总体策略（不需要具体的代码解决方案）。<br>
> 4. 在完成基本功能后，可以尝试实现的两个进阶目标，以提升项目的复杂度。<br>
> 5. 这个项目将帮助我强化或学习的三个[Z]相关的重要概念或技能。<br>  
> 
> 请以引导思考的方式来回答，而不是提供明确的解决方案。我希望在实现细节方面受到挑战，自己去找出解决方法。
 - 你主要扮演两个角色，Planer、Debugger，而不是Coder
 - AI写出来的代码也要去看，尽可能运用AI弄懂AI的代码

### 开发项目需要注意的点
 - 循序渐进，从简单做到复杂，不要一上来就上强度
 - 慢慢摸到AI的能力上限。在AI的能力范围内，找到能赚钱的套利空间
 - 分两种上限：单次对话的上限，完成一个项目的复杂度上限
 - 工具还在发展，上限还在提高，每一两个月可以关注一下AI工具更新内容

## 03 有哪些工具可以使用？
 - 模型 claude 3.5 Sonnet 写代码最强，但其他模型也可以用
 - 产品工具 cursor 最强
 - 不用纠结，先有啥用啥，豆包/Deepseek/通义灵码/marscode
 - v0/bolt.new (网页UI)

### 开发流程
 - claude、豆包 软件需求，拆分，设计
 - v0/bolt.new 把UI做出来（这部分代码可以导出）
 - cursor进一步开发

## 参考

[微软码农致全地球人，0基础AI编程速成指南](https://www.bilibili.com/video/BV1DkwYegEPS/)
